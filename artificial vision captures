import cv2
import mediapipe as mp
import os

nombre = 'Z'
direccion = r'C:\Users\ferna\Desktop\Proyecto modular\Interprete\Fotos\Entrenamiento'
carpeta = direccion + '/' + nombre

if not os.path.exists(carpeta):
    os.makedirs(carpeta)
    print('Carpeta creada: ',carpeta)
    
cont = 100

mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands

cap = cv2.VideoCapture(0)

with mp_hands.Hands(
    static_image_mode = False,
    max_num_hands = 1,
    min_detection_confidence = 0.5,
    min_tracking_confidence = 0.5) as hands:

    while True:
        ret, frame = cap.read()
        if ret == False:
            break

        height, width, _ = frame.shape
        frame = cv2.flip(frame,1)
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        results = hands.process(frame_rgb)
        copia = frame.copy()
        
        if results.multi_hand_landmarks is not None:
            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(
                    frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
                x1 = int(hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_MCP].x * width)
                y1 = int(hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_MCP].y * height)

                a = x1 - 150
                b = y1 - 150
                c = x1 + 150
                d = y1 + 150
                dedos_reg = copia[a:c, b:d]
                #print("Handedness: ", results.multi_handedness) #Imprime caracterÃ­sticas de la mano
                #print(results.multi_hand_landmarks)
                cv2.circle(frame, (x1,y1), 3, (255, 0, 0), 3)
                if a > 0 and c < width and b > 0 and d < height:
                    cv2.rectangle(frame, (a, b), (c, d), (255, 0, 0), 3)
                    dedos_reg = cv2.resize(dedos_reg, (320, 320), interpolation=cv2.INTER_CUBIC)
                    cv2.imwrite(carpeta + "/Z_{}.jpg".format(cont), dedos_reg)
                    cont = cont + 1
                    print(cont)

        cv2.imshow("Frame", frame)
        k = cv2.waitKey(1)
        if k == 27 or cont >= 200:
            break

cap.release()
cv2.destroyAllWindows()
